%example% ImageSetup - Class to manipulate figures% This class allows to manipulate open figures and save them in different% formats. The differents parameters of the figures can be adjusted and% then applied by using h.prepareAllFigures. % Syntax: % % % Example%   close all%   figure; plot(rand(1,100)); title('1')%   figure; plot(rand(1,100)); title('2')%   h = ImageSetup; %   h.I_FontSize = 14; %   h.I_FontName = 'Arial'; %   h.I_Width = 8;%   h.I_Height= 8;%   h.I_TitleInAxis = 1;%   h.I_Space = [0.01,0.01];%   h.I_Ylim = [-1,1];%   h.I_Grid = 'off';%   h.I_Matrix = [2,2];%   h.I_KeepColor = 0; %   h.prepareAllFigures%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Implementing Jaime's script:% % close all% Figure2 = figure; % t = 0:0.1:5;% x = t.^2;% subplot(4,2,1),% plot(t, x)% ylabel('Amplitude'), % title( 'A' )% subplot(4,2,2)% plot(t, x)% title('B')% subplot(4,2,3)% plot(t, x), % title('C')% % xlabel('t (s)'),% subplot(4,2,4),% plot(t, x)% ylabel('Amplitude'), % title( 'D' )% subplot(4,2,5)% plot(t, x)% title('E')% subplot(4,2,6)% plot(t, x), % title('F')% subplot(4,2,7)% plot(t, x), % title('G')% subplot(4,2,8)% plot(t, x), % title('H')% h = ImageSetup; % h.I_Matrix = [4,4];% h.I_FontSize = 20; % h.I_FontName = 'Arial'; % h.I_Width = 8;% h.I_Height= 8;% h.I_TitleInAxis = 1;% h.I_Space = [0.01,0.01];% % % h.I_Ylim = [-1,1]; % Uncomment for fixing the limits in the y-axis% h.I_Xlim = [0,5];% h.I_Grid = 'on'; % h.I_KeepColor = 0; % h.prepareAllFigures;% h.arrayAddedHandles = 1;% add2ArraySubplotVer(h);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Subfunctions: ImageSetup%%% This program is free software: you can redistribute it and/or modify% it under the terms of the GNU General Public License as published by% the Free Software Foundation, either version 3 of the License, or   % (at your option) any later version.                                 %                                                                    % This program is distributed in the hope that it will be useful,     % but WITHOUT ANY WARRANTY; without even the implied warranty of      % MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       % GNU General Public License for more details.                        % You should have received a copy of the GNU General Public License% along with this program.  If not, see <http://www.gnu.org/licenses/>.% Copyright 2012 Jaime Undurraga <jaime.undurraga@gmail.com>.%% Programmed by: Jaime Undurraga% Created in: 2012% Edited by: Alejandro Osses% Last edited on: 07/01/2015%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%classdef ImageSetup < hgsetget   properties       I_Width;      I_Height;      I_Unit;      I_DPI;      I_FontSize;      I_FontName;      I_Legend;      I_LegendLocation;      I_Xlabel;      I_Ylabel;      I_Title;      I_Box;      I_Grid;      I_Handles;      I_Space;      I_AutoYlim;      I_Ylim;      I_AutoXlim;      I_Xlim;      I_KeepColor;      I_LineWidth;      I_TitleInAxis;      I_AlignAxesTexts;      I_LegendBox;      I_Matrix;      ResetLineWidth;      OptimizeSpace;   end    properties (GetAccess = private)       verAddedHandles;       horAddedHandles;       arrayAddedHandles;       updateContainerFigure;       hOutFig;   end   methods       function obj = ImageSetup()          obj.I_Width = 17.8;% width of the figure;Hearing research 17.8 double column and 8.4single column          obj.I_Height = 16;%height of the figure          obj.I_Unit='centimeters';%units to set with and height          obj.I_DPI=300;%this DPI will be use to save figures          obj.I_FontSize = 8;%size of fonts in the figure          obj.I_FontName = 'Arial';%type of fonts for the figure          obj.I_Legend = 'on';%hide the legend when off          obj.I_LegendLocation = '';%place of legend; see matlab legend documentation for details          obj.I_Xlabel = 'on';%show xlabel when on          obj.I_Ylabel = 'on';%show ylabel when on          obj.I_Title = 'on';%shows title if on          obj.I_Box = 'on';%show figure box when on          obj.I_Grid = 'on';%hide the grid if on          obj.hOutFig = -1;          obj.I_Space = [0.015 0.015];%control the space bwtween to figures (x,y)          obj.I_AutoYlim = false;%use I_YLim when false          obj.I_Ylim = [-inf inf];          obj.I_AutoXlim = false;%use I_XLim when false          obj.I_Xlim = [-inf inf] ;          obj.I_TitleInAxis = true;%puts the title inside or above the the axis          obj.I_KeepColor = false;%if false, figures are converted to grayscale          obj.I_LineWidth = 1;%apply this line with to all figures when ResetLineWidth is called          obj.I_AlignAxesTexts = true;%this aling texts to right part if string saved in UserData is not'keep_pos'          obj.I_LegendBox = true;%shows leyend box when true          obj.I_Matrix = [4,4];%set the size of the container figure (rows,cols)          obj.ResetLineWidth = false;%applies I_LineWidth to all figures          obj.updateContainerFigure = true;          obj.OptimizeSpace = true;%when true, preparAllFigures will try to minimize empty white space on figures      end      function obj = set.I_Height(obj,height)         if isfloat(height)            obj.I_Height = height;         else            error('height must be float')         end      end      function obj = set.I_Width(obj,width)         if isfloat(width)            obj.I_Width = width;         else            error('width must be float')         end      end      function obj = set.I_Unit(obj,unit)         if isstr(unit)            obj.I_Unit = unit;         else            error('unit must be string')         end      end      function obj = set.I_DPI(obj,dpi)         if isfloat(dpi)            obj.I_DPI = dpi;         else            error('dpi must be float')         end      end      function obj = set.I_FontSize(obj,fontsize)         if isfloat(fontsize)            obj.I_FontSize = fontsize;         else            error('fontsize must be float')         end      end      function obj = set.I_FontName(obj,fontName)         if isstr(fontName)            obj.I_FontName = fontName;         else            error('fontName must be string')         end      end            function obj = set.I_Legend(obj,onoff)         if isstr(onoff)            obj.I_Legend = onoff;         else            error('onoff must be string')         end      end           function obj = set.I_LegendLocation(obj,location)         if isstr(location)            obj.I_LegendLocation = location;         else            error('location must be string')         end      end      function obj = set.I_Xlabel(obj,onoff)         if isstr(onoff)            obj.I_Xlabel = onoff;         else            error('onoff must be string')         end      end      function obj = set.I_Ylabel(obj,onoff)         if isstr(onoff)            obj.I_Ylabel = onoff;         else            error('onoff must be string')         end      end      function obj = set.I_Title(obj,onoff)         if isstr(onoff)            obj.I_Title = onoff;         else            error('onoff must be string')         end      end      function obj = set.I_Box(obj,onoff)         if isstr(onoff)            obj.I_Box = onoff;         else            error('onoff must be string')         end      end      function obj = set.I_Grid(obj,onoff)         if isstr(onoff)            obj.I_Grid = onoff;         else            error('onoff must be string')         end      end      function obj = set.I_Space(obj,space)         if isvector(space)            obj.I_Space = space;            obj.updateContainerFigure = true;         else            error('width must be vector')         end      end      function obj = set.I_AutoYlim(obj,auto)         if islogical(auto)            obj.I_AutoYlim = auto;         else            error('width must be logical')         end      end      function obj = set.I_Ylim(obj,lim)         if isvector(lim)            obj.I_Ylim = lim;            obj.updateContainerFigure = true;         else            error('width must be vector')         end      end      function obj = set.I_AutoXlim(obj,auto)         if islogical(auto)            obj.I_AutoXlim = auto;         else            error('width must be logical')         end      end      function obj = set.I_Xlim(obj,lim)         if isvector(lim)            obj.I_Xlim = lim;            obj.updateContainerFigure = true;         else            error('width must be a vector')         end      end   endend